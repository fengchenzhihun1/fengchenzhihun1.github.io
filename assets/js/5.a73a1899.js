(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{226:function(_,t,a){_.exports=a.p+"assets/img/20190703224938.daff4ae6.png"},227:function(_,t,a){_.exports=a.p+"assets/img/20190706092937.b0aed5d8.png"},228:function(_,t,a){_.exports=a.p+"assets/img/20190706094058.4889d9ff.png"},229:function(_,t,a){_.exports=a.p+"assets/img/20190706100727.de1a08ed.png"},230:function(_,t,a){_.exports=a.p+"assets/img/20190706101023.2de52289.png"},261:function(_,t,a){"use strict";a.r(t);var v=a(0),r=Object(v.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"神书：微服务从设计到部署学习笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#神书：微服务从设计到部署学习笔记"}},[_._v("#")]),_._v(" 神书：微服务从设计到部署学习笔记")]),_._v(" "),v("p",[v("strong",[_._v("持续更新中.....")])]),_._v(" "),v("p",[v("strong",[_._v("不管是springCloudNetflix组件还是SpringClude阿里巴巴还是其他微服务组件无法是为了解决如下四个问题")])]),_._v(" "),v("ol",[v("li",[v("em",[v("strong",[_._v("客户端如何访问微服务")])])]),_._v(" "),v("li",[v("em",[v("strong",[_._v("服务与服务之间如何通信，怎么发现")])])]),_._v(" "),v("li",[v("em",[v("strong",[_._v("那么多服务如何管理")])])]),_._v(" "),v("li",[v("em",[v("strong",[_._v("服务挂了怎么办")])])])]),_._v(" "),v("p",[v("strong",[_._v("可以Netflix系组件与阿里系组件都是为了解决上述问题、")])]),_._v(" "),v("p",[v("strong",[v("a",{attrs:{href:"https://docshome.gitbooks.io/microservices/content/",target:"_blank",rel:"noopener noreferrer"}},[_._v("神书中文版Git地址"),v("OutboundLink")],1)])]),_._v(" "),v("h2",{attrs:{id:"_1-微服务简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-微服务简介"}},[_._v("#")]),_._v(" 1. 微服务简介")]),_._v(" "),v("h3",{attrs:{id:"_1-1-构建单体应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-构建单体应用"}},[_._v("#")]),_._v(" 1.1 构建单体应用")]),_._v(" "),v("p",[_._v("​\t所谓单体应用就是说所有外部暴露的接口或者对外服务的组件都是由核心应用进行提供的。在项目早期的优点是：易于开发、易于测试、易于部署、易于维护")]),_._v(" "),v("h3",{attrs:{id:"_1-2走向单体地狱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2走向单体地狱"}},[_._v("#")]),_._v(" 1.2走向单体地狱")]),_._v(" "),v("p",[_._v("​\t随着时间的推移单体应用的弊端就暴露出来了.")]),_._v(" "),v("pre",[v("code",[_._v("1. 比如说系统变得越来越大。代码变得越来越臃肿，对于修改bug和实现新功能带来了极大的挑战\n2. 应用的启动时间也将变得越来越长\n3. 可靠性问题，一个功能点的异常可能会导致整个系统崩溃\n4. 持续部署也将变得不可能\n5. 资源发生冲突时，单体应用难以扩展（比如一个模块执行cpu密集型，另外一个模块是内存数据库适合部署到其他实例上）\n6. 采用新的矿建非常困难\n")])]),_._v(" "),v("h3",{attrs:{id:"_1-3微服务-解决复杂问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3微服务-解决复杂问题"}},[_._v("#")]),_._v(" 1.3微服务 - 解决复杂问题")]),_._v(" "),v("pre",[v("code",[_._v("1. 將应用程序分解为一套较小的互联服务，一个服务实现一个功能\n2. 提供对外服务的接口\n3. 每个实例运行在一个云虚拟主机或者一个Docke容器上\n")])]),_._v(" "),v("h3",{attrs:{id:"_1-4微服务的优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4微服务的优点"}},[_._v("#")]),_._v(" 1.4微服务的优点")]),_._v(" "),v("pre",[v("code",[_._v("1. 解决了复杂问题。（应用拆分，个体开发，易维护理解）\n2. 每个服务可以由专门的团队进行开发。\n3. 实现微服务的福利部署\n")])]),_._v(" "),v("h3",{attrs:{id:"_1-5微服务的缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5微服务的缺点"}},[_._v("#")]),_._v(" 1.5微服务的缺点")]),_._v(" "),v("pre",[v("code",[_._v("1. 名称本身，偏重于微服务的规模\n2. 是一个分布式系统，使整体变得复杂\n3. 分区数据架构苦难\n4. 测试复杂\n5. 跨越多服务变更\n6. 部署复杂\n")])]),_._v(" "),v("h3",{attrs:{id:"_1-6总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6总结"}},[_._v("#")]),_._v(" 1.6总结")]),_._v(" "),v("p",[_._v("​\t构建复杂的微服务本质上是复杂的、单体应用只适用于简单、轻量的程序，复杂的话微服务是一个很好的选择。尽管他有缺点和实现挑战")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：nginx-plus作为反向代理服务器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：nginx-plus作为反向代理服务器"}},[_._v("#")]),_._v(" 微服务实战：NGINX Plus作为反向代理服务器")]),_._v(" "),v("p",[_._v("​\tnginx反向代理")]),_._v(" "),v("h2",{attrs:{id:"_2-使用api网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用api网关"}},[_._v("#")]),_._v(" 2. 使用API网关")]),_._v(" "),v("h3",{attrs:{id:"_2-1-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简介"}},[_._v("#")]),_._v(" 2.1 简介")]),_._v(" "),v("p",[_._v("​\t关于API网关，要先举个栗子更容易理解。例如购物网站中的商品，它不仅包含商品的详细信息，海报库库存、型号、商品评价等一系列的信息。")]),_._v(" "),v("p",[_._v("​\t在单体应用中，上述信息一般是通过一个接口向一个应用上发送请求。大寝室在微服务架构中就稍有不同了，那些信息会来自多个微服务。我们需要决定客户端应该如何访问这些服务。")]),_._v(" "),v("h3",{attrs:{id:"_2-2客户端与微服务直接通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2客户端与微服务直接通信"}},[_._v("#")]),_._v(" 2.2客户端与微服务直接通信")]),_._v(" "),v("p",[_._v("​\t直接通信就以为直连，既上述的每个信息都将由各自的微服务提供接口，但是这种方式存在着很大的限制。主要如下")]),_._v(" "),v("pre",[v("code",[_._v("1. 客户端的需求与每个微服务暴露的细粒度API不匹配、需要多次请求\n2. 使用非web友好协议\n")])]),_._v(" "),v("h3",{attrs:{id:"_2-3使用api网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3使用api网关"}},[_._v("#")]),_._v(" 2.3使用API网关")]),_._v(" "),v("p",[_._v("​\tAPI网关是有个服务器，是系统的单入口、它类似与，门面设计模式。网关丰庄路内部细节可以针对每个客户提供定制API，而且还具有认证、监控、负责均衡、缓存、静态相应处理、")]),_._v(" "),v("p",[_._v("​\tAPI网关负责请求路由、组合和协议转换。")]),_._v(" "),v("h3",{attrs:{id:"_2-4api网关的优点与缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4api网关的优点与缺点"}},[_._v("#")]),_._v(" 2.4API网关的优点与缺点")]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("优点")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("封装程序的内部结构客户端只需要与API通信")])]),_._v(" "),v("li",[v("p",[_._v("减少了客户端与应用程序之间的往返测试，简化了客户端的代码")]),_._v(" "),v("p",[v("strong",[_._v("缺点")])])]),_._v(" "),v("li",[v("p",[_._v("是一个高度可用的组件需要开发部署和管理")])]),_._v(" "),v("li",[v("p",[_._v("APi网关可能会成为开发瓶颈")])])]),_._v(" "),v("h3",{attrs:{id:"_2-5实施api网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5实施api网关"}},[_._v("#")]),_._v(" 2.5实施API网关")]),_._v(" "),v("h4",{attrs:{id:"_2-5-1-性能与可扩展性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-性能与可扩展性"}},[_._v("#")]),_._v(" 2.5.1 性能与可扩展性")]),_._v(" "),v("ul",[v("li",[_._v("处理数据规模")]),_._v(" "),v("li",[_._v("使用NIO框架")])]),_._v(" "),v("h4",{attrs:{id:"_2-5-2使用响应式编程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2使用响应式编程模型"}},[_._v("#")]),_._v(" 2.5.2使用响应式编程模型")]),_._v(" "),v("p",[_._v("​\t对于请求彼此独立的服务，为了缩短时间，API网关应该执行并发操作，有时候请求是相互依赖的，使用传统的异步调用来编写API会使我们陷入回调地狱，好的方法是使用响应式方法以声明式编写API网关代码")]),_._v(" "),v("h4",{attrs:{id:"_2-5-3服务调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3服务调用"}},[_._v("#")]),_._v(" 2.5.3服务调用")]),_._v(" "),v("p",[_._v("​\t微服务应用是一个分布式系统，必须使用一个进程间通信机制。")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("基于消息的异步机制（消息代理）JMS、AMQP。（无代理直接与服务通信）Zeromq")])]),_._v(" "),v("li",[v("p",[_._v("进程间同步如HTTP和Thrift")]),_._v(" "),v("p",[_._v("因此APi网关需要支持各种通信机制")])])]),_._v(" "),v("h4",{attrs:{id:"_2-5-4服务发现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4服务发现"}},[_._v("#")]),_._v(" 2.5.4服务发现")]),_._v(" "),v("p",[_._v("​\t使用系统发现机制：服务端发现或客户端发现")]),_._v(" "),v("h4",{attrs:{id:"_2-5-5处理局部故障"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-5处理局部故障"}},[_._v("#")]),_._v(" 2.5.5处理局部故障")]),_._v(" "),v("p",[_._v("​\t局部故障问题，当一个服务调用另外一个服务缓慢或者不可用的服务时，API网关不应该无期限的等待下游服务。")]),_._v(" "),v("h3",{attrs:{id:"_2-6总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-6总结"}},[_._v("#")]),_._v(" 2.6总结")]),_._v(" "),v("p",[_._v("​\t处理网关请求，还可以在出现问题时还可以返回默认数据，掩盖后端服务故障")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：nginx-plus作为api网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：nginx-plus作为api网关"}},[_._v("#")]),_._v(" 微服务实战：NGINX Plus作为API网关")]),_._v(" "),v("ul",[v("li",[_._v("访问管理")]),_._v(" "),v("li",[_._v("客观理性与弹性")]),_._v(" "),v("li",[_._v("与第三方工具集成")])]),_._v(" "),v("h2",{attrs:{id:"_3进程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3进程间通信"}},[_._v("#")]),_._v(" 3进程间通信")]),_._v(" "),v("h3",{attrs:{id:"_3-1简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1简介"}},[_._v("#")]),_._v(" 3.1简介")]),_._v(" "),v("pre",[v("code",[_._v("* 单体应用通过语言级别的方法或者函数进行调用\n* 微服务是运行在多台机器上的分布式系统，通常每个实例都是一个进程 \t\n")])]),_._v(" "),v("h3",{attrs:{id:"_3-2交互方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2交互方式"}},[_._v("#")]),_._v(" 3.2交互方式")]),_._v(" "),v("p",[v("strong",[_._v("两大类")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("一对一一对多")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("一对一")]),_._v(" 每个客户端请求由一个服务实例处理")]),_._v(" "),v("li",[v("strong",[_._v("一对多")]),_._v(" 每个请求由对个服务实例处理")])])]),_._v(" "),v("li",[v("p",[_._v("同步异步")]),_._v(" "),v("p",[v("strong",[_._v("同步")]),_._v(" 客户端要求服务及时响应，在等待过程中可能会发生阻塞")]),_._v(" "),v("p",[v("strong",[_._v("异步")]),_._v(" 客户端在等待中不会产生阻塞，但响应不一定立即返回")])]),_._v(" "),v("li",[v("p",[_._v("各种交互方式")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[v("strong",[_._v("-")])]),_._v(" "),v("th",[_._v("一对一")]),_._v(" "),v("th",[_._v("一对多")])])]),_._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("同步")]),_._v(" "),v("td",[_._v("请求/响应")]),_._v(" "),v("td",[_._v("-")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("异步")]),_._v(" "),v("td",[_._v("通知")]),_._v(" "),v("td",[_._v("发布/订阅")])]),_._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[_._v("异步")]),_._v(" "),v("td",[_._v("请求/响应")]),_._v(" "),v("td",[_._v("发布/异步响应")])])])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("**请求/响应 **")]),_._v(" "),v("p",[_._v("客户端向服务发出请求并等待响应。客户端要求响应及时到达。在基于线程的应用程序中，发出请求的线程可能在等待时发生阻塞。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("通知（又称为单向请求）")])]),_._v(" "),v("p",[_._v("客户端向服务发送请求，但不要求响应。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("请求/异步响应")])]),_._v(" "),v("p",[_._v("客户端向服务发送请求，服务异步响应。客户端在等待时不发生阻止，适用于假设响应可能不会立即到达的场景。")]),_._v(" "),v("p",[_._v("一对多交互可分为以下列举的类型，它们都是异步的**：**")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("发布 发布/订阅客户端")])]),_._v(" "),v("p",[_._v("发布通知消息，由零个或多个感兴趣的服务消费。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("发布 发布/异步响应")])]),_._v(" "),v("p",[_._v("客户端发布请求消息，之后等待一定时间来接收消费者的响应。")])])])])]),_._v(" "),v("h3",{attrs:{id:"_3-3定义api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3定义api"}},[_._v("#")]),_._v(" 3.3定义API")]),_._v(" "),v("p",[_._v("​\t服务API是服务与客户端之间的契约。")]),_._v(" "),v("h3",{attrs:{id:"_3-4演化api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4演化api"}},[_._v("#")]),_._v(" 3.4演化API")]),_._v(" "),v("pre",[v("code",[_._v("* 服务APi总是随着时间而变化。\n* 无法强制所有客户端与服务器升级的节奏一直，因此需要逐步部署\n* 需要向后尖肉，应遵循鲁棒性原则\n* 版本号嵌入，每个服务同时处理多个版本\n")])]),_._v(" "),v("h3",{attrs:{id:"_3-5处理局部故障"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-5处理局部故障"}},[_._v("#")]),_._v(" 3.5处理局部故障")]),_._v(" "),v("p",[v("img",{attrs:{src:a(226),alt:"故障"}})]),_._v(" "),v("p",[v("strong",[_._v("nginx给出的方案")])]),_._v(" "),v("ul",[v("li",[_._v("网络超时")]),_._v(" "),v("li",[_._v("限制未完成的请求数量")]),_._v(" "),v("li",[_._v("断路器模式")]),_._v(" "),v("li",[_._v("提供回退  返回缓存数据或者默认值")])]),_._v(" "),v("h3",{attrs:{id:"_3-6ipc技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-6ipc技术"}},[_._v("#")]),_._v(" 3.6IPC技术")]),_._v(" "),v("p",[_._v("​\t进程间通信技术")]),_._v(" "),v("h3",{attrs:{id:"_3-7异步、基于消息的通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-7异步、基于消息的通信"}},[_._v("#")]),_._v(" 3.7异步、基于消息的通信")]),_._v(" "),v("pre",[v("code",[_._v("消息通过通道进行交换，用两种通信类型\n")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("点对点通道")]),_._v(" "),v("p",[_._v("一对一交互")])]),_._v(" "),v("li",[v("p",[_._v("发布订阅通道")]),_._v(" "),v("p",[_._v("一对多交互")]),_._v(" "),v("p",[_._v("使用信息传递的优点")])]),_._v(" "),v("li",[v("p",[_._v("将客户端与 服务进行分离")])]),_._v(" "),v("li",[v("p",[_._v("消息缓冲")])]),_._v(" "),v("li",[v("p",[_._v("灵活的客户端-服务交换")])]),_._v(" "),v("li",[v("p",[_._v("毫无隐瞒的进程间通信")]),_._v(" "),v("p",[_._v("缺点")])]),_._v(" "),v("li",[v("p",[_._v("额外的复杂度")])]),_._v(" "),v("li",[v("p",[_._v("实施基于请求/响应交互的复杂性")])])]),_._v(" "),v("h3",{attrs:{id:"_3-8同步的请求-响应-ipc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-8同步的请求-响应-ipc"}},[_._v("#")]),_._v(" 3.8同步的请求/响应 IPC")]),_._v(" "),v("h4",{attrs:{id:"_3-9-1rest"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-1rest"}},[_._v("#")]),_._v(" 3.9.1REST")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("REST通常表示业务对象，如客户、产品这些业务对象的集合")])]),_._v(" "),v("li",[v("p",[_._v("REST使用HTTP动词（谓词）来操作对象")]),_._v(" "),v("p",[_._v("REST成熟度模型层次")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("级别0")]),_._v("  客户端唯一端点调用服务 post")]),_._v(" "),v("li",[v("strong",[_._v("级别1")]),_._v("  资源概念  post")]),_._v(" "),v("li",[v("strong",[_._v("级别2")]),_._v(" 使用API谓词 post get put delete")]),_._v(" "),v("li",[v("strong",[_._v("级别3")]),_._v(" 非常规命名，HATEOAS")])]),_._v(" "),v("p",[_._v("基于http的协议有很多好处")]),_._v(" "),v("ul",[v("li",[_._v("简单易懂")]),_._v(" "),v("li",[_._v("使用浏览器扩展（如postman），或者使用curl")]),_._v(" "),v("li",[_._v("直接支持请求/响应式通信")]),_._v(" "),v("li",[_._v("不需要中间代理")])]),_._v(" "),v("p",[_._v("缺点")]),_._v(" "),v("ul",[v("li",[_._v("服务器需要始终发送http响应")]),_._v(" "),v("li",[_._v("直通（没有中间这缓冲信息），必须一直都在运行、")]),_._v(" "),v("li",[_._v("客户端必须知道每个服务的位置")])])])]),_._v(" "),v("h4",{attrs:{id:"_3-9-2thrift"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-2thrift"}},[_._v("#")]),_._v(" 3.9.2Thrift")]),_._v(" "),v("p",[_._v("​\tAPatchThrift是一个rest的有趣替代方案")]),_._v(" "),v("h3",{attrs:{id:"_3-9消息格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-9消息格式"}},[_._v("#")]),_._v(" 3.9消息格式")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("xml")])]),_._v(" "),v("li",[v("p",[_._v("json")]),_._v(" "),v("p",[_._v("jsonSchedule")])]),_._v(" "),v("li",[v("p",[_._v("Protocol Buffers")])]),_._v(" "),v("li",[v("p",[_._v("ApacheAvro")])])]),_._v(" "),v("h4",{attrs:{id:"_3-10总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-10总结"}},[_._v("#")]),_._v(" 3.10总结")]),_._v(" "),v("p",[_._v("​\t微服务必须使用进程间通信机制进行通信。在设计服务如何进行通信时，您需要考虑各种问题：服务如何交互、如何为每个服务指定 API、如何演变 API 以及如何处理局部故障。微服务可以使用两种 IPC 机制：异步消息传递和同步请求/响应。为了进行通信，一个服务必须能够找到另一个服务")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：nginx与应用程序架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：nginx与应用程序架构"}},[_._v("#")]),_._v(" 微服务实战：NGINX与应用程序架构")]),_._v(" "),v("h2",{attrs:{id:"_4-服务发现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务发现"}},[_._v("#")]),_._v(" 4.服务发现")]),_._v(" "),v("h3",{attrs:{id:"_4-1为何使用服务发现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1为何使用服务发现"}},[_._v("#")]),_._v(" 4.1为何使用服务发现")]),_._v(" "),v("p",[_._v("​\t服务实例具有动态分配的网络位置。此外，由于自动扩缩、故障与升级，整组服务实例会动态变更。因此，您的客户端代码需要使用更精确的服务发现机制。")]),_._v(" "),v("p",[_._v("​\t主要有两种发现机制")]),_._v(" "),v("ul",[v("li",[_._v("客户端发现")]),_._v(" "),v("li",[_._v("服务端发现")])]),_._v(" "),v("h3",{attrs:{id:"_4-2客户端发现模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-2客户端发现模式"}},[_._v("#")]),_._v(" 4.2客户端发现模式")]),_._v(" "),v("p",[_._v("​\t客户端发现负责确定可用服务的网络位置和请求负载均衡，客户端查询注册中心，利用balance算法选择一个可用实例并发送请求。")]),_._v(" "),v("p",[v("img",{attrs:{src:a(227),alt:"客户端发现"}})]),_._v(" "),v("p",[_._v("​\t服务启动时被注册，服务终止时被移除、通常使用心跳机制周期性刷新服务实例的注册信息")]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("优点")])]),_._v(" "),v("ol",[v("li",[_._v("该模式相对简单")]),_._v(" "),v("li",[_._v("使用特定于应用程序的复杂均衡")])]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("缺点")])]),_._v(" "),v("pre",[v("code",[_._v("1. 客户端与服务注册中心耦合在一起，必须为每种编程语言和框架实现客户端发现逻辑\n")])]),_._v(" "),v("h3",{attrs:{id:"_4-3服务端发现模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3服务端发现模式"}},[_._v("#")]),_._v(" 4.3服务端发现模式")]),_._v(" "),v("p",[v("img",{attrs:{src:a(228),alt:"服务端发现"}})]),_._v(" "),v("p",[_._v("​\t服务端发现模式有几个优点与缺点。该模式的一大的优点是把发现的细节从客户端抽象出来。客户端只需向负载均衡器发出请求。这消除了为服务客户端使用的每种编程语言和框架都实现发现逻辑的必要性。另外，如上所述，一些部署环境免费提供此功能。然而，这种模式存在一些缺点。除非负载均衡器由部署环境提供，否则您需要引入这个高可用系统组件，并进行设置和管理。")]),_._v(" "),v("h3",{attrs:{id:"_4-4服务注册中心"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-4服务注册中心"}},[_._v("#")]),_._v(" 4.4服务注册中心")]),_._v(" "),v("p",[_._v("​\t注册中心是服务发现的一个关键怒分，它是一个包含了服务实例网络位置的数据。同时使用复制协议来维护一致性。")]),_._v(" "),v("h3",{attrs:{id:"_4-5服务注册方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-5服务注册方式"}},[_._v("#")]),_._v(" 4.5服务注册方式")]),_._v(" "),v("p",[_._v("​\t服务实例必须在服务注册中心注册于销毁。")]),_._v(" "),v("pre",[v("code",[_._v("1. 服务实例自我注册，即自注册模式。\n2. 使用其他系统组件来管理服务实例的注册，即第三次注册，模式。\n")])]),_._v(" "),v("h3",{attrs:{id:"_4-6自注册模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-6自注册模式"}},[_._v("#")]),_._v(" 4.6自注册模式")]),_._v(" "),v("p",[_._v("​\t"),v("img",{attrs:{src:a(229),alt:"服务端发现"}})]),_._v(" "),v("p",[_._v("​\t自注册模式有好有坏。一个好处是它相对简单，不需要任何其他系统组件。然而，主要缺点是它将服务实例与服务注册中心耦合。您必须为服务使用的每种编程语言和框架都实现注册代码。 将服务与服务注册中心分离的替代方法是第三方注册模式。")]),_._v(" "),v("h4",{attrs:{id:"_4-7第三方注册模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-7第三方注册模式"}},[_._v("#")]),_._v(" 4.7第三方注册模式")]),_._v(" "),v("p",[v("img",{attrs:{src:a(230),alt:"服务端发现"}})]),_._v(" "),v("p",[_._v("​\t当使用第三方注册模式时，服务实例不再负责向服务注册中心注册自己。相反，该工作将由被称为服务注册器（service registrar）的另一系统组件负责。服务注册器通过轮询部署环境或订阅事件来跟踪运行实例集的变更情况。当它检测到一个新的可用服务实例时，它会将该实例注册到服务注册中心。此外，服务注册器可以注销终止的服务实例。")]),_._v(" "),v("pre",[v("code",[_._v("第三方注册模式同样有好有坏。一个主要的好处是服务与服务注册中心之间解耦。您\n")])]),_._v(" "),v("p",[_._v("不需要为开发人员使用的每种编程语言和框架都实现服务注册逻辑。相反，仅需要在\n专用服务中以集中的方式处理服务实例注册。\n该模式的一个缺点是，除非部署环境内置，否则您同样需要引入这样一个高可用的系\n统组件，并进行设置和管理。")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：nginx的灵活性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：nginx的灵活性"}},[_._v("#")]),_._v(" 微服务实战：NGINX的灵活性")]),_._v(" "),v("h2",{attrs:{id:"_5-事件驱动数据管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-事件驱动数据管理"}},[_._v("#")]),_._v(" 5.事件驱动数据管理")]),_._v(" "),v("h3",{attrs:{id:"_5-1微服务和分布式数据管理问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-1微服务和分布式数据管理问题"}},[_._v("#")]),_._v(" 5.1微服务和分布式数据管理问题")]),_._v(" "),v("p",[_._v("​\t单体应用通常有一个单一的关系型数据库，主要优点是可以使用ACID事物，提供以下保障")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("原子性")]),_._v(" 原子操作不可分割")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("一致性")]),_._v(" 状态保持一致")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("隔离性")]),_._v(" 即使是并发执行，看起来更像是串行")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("永久性")]),_._v(" 事物提交，不可撤销")]),_._v(" "),v("p",[_._v("基于微服务的应用程序通常混合使用SQL和NoSQL，即所谓的混合持久化")]),_._v(" "),v("ol",[v("li",[_._v("如何维护多个服务之间的业务事物一致性")]),_._v(" "),v("li",[_._v("如何从多个服务中检索数据")])])])]),_._v(" "),v("h3",{attrs:{id:"_5-2事件驱动架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-2事件驱动架构"}},[_._v("#")]),_._v(" 5.2事件驱动架构")]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("事件驱动")]),_._v("：微服务在发生某些重要事件时发布一个事件、")]),_._v(" "),v("h3",{attrs:{id:"_5-3实现原子性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-3实现原子性"}},[_._v("#")]),_._v(" 5.3实现原子性")]),_._v(" "),v("p",[_._v("​\t事件驱动架构中，同样存在着原子更新数据库和发布事件相关问题")]),_._v(" "),v("h3",{attrs:{id:"_5-4使用本地事物发布事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-4使用本地事物发布事件"}},[_._v("#")]),_._v(" 5.4使用本地事物发布事件")]),_._v(" "),v("p",[_._v("​\t应用程序使用仅涉及本地事物的多步骤过程来发布事物。")]),_._v(" "),v("h3",{attrs:{id:"_5-5挖掘数据库事务日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-5挖掘数据库事务日志"}},[_._v("#")]),_._v(" 5.5挖掘数据库事务日志")]),_._v(" "),v("p",[_._v("​\t不依靠 2PC 来实现原子性的另一种方式是使用线程或进程发布事件，该线程或进程对数据库的事务或者提交日志进行挖掘。当应用程序更新数据库时，更改信息被记录到数据库的事务日志中。Transaction Log Miner 线程或进程读取事务日志并向 Message Broker 发布事件")]),_._v(" "),v("p",[_._v("​")]),_._v(" "),v("h3",{attrs:{id:"_5-6使用事件溯源"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-6使用事件溯源"}},[_._v("#")]),_._v(" 5.6使用事件溯源")]),_._v(" "),v("p",[_._v("​\t事件溯源通过使用完全不同的、不间断的方式来持久化业务实体，实现无 2PC 原应用程序不存储实体的当前状态，而是存储一系列状态改变事件。该应用程序通放事件来重建实体的当前状态。无论业务实体的状态何时发生变化，其都会将新追加到事件列表中。由于保存事件是一个单一操作，因此具有原子性。")]),_._v(" "),v("h3",{attrs:{id:"_5-7总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-7总结"}},[_._v("#")]),_._v(" 5.7总结")]),_._v(" "),v("p",[_._v("​\t在微服务架构中，每个微服务都有自己私有的数据存储。不同的微服务可能会使用不同的 SQL 或者 NoSQL 数据库。虽然这种数据库架构具有明显的优势，但它创造了一些分布式数据管理挑战。第一个挑战是如何实现维护多个服务间的业务事务一致性。第二个挑战是如何实现从多个服务中检索数据。 大部分应用使用的解决方案是事件驱动架构。实现事件驱动架构的一个挑战是如何以原子的方式更新状态以及如何发布事件。有几种方法可以实现这点，包括了将数据库作为消息队列、事务日志挖掘和事件溯源。")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：nginx与存储优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：nginx与存储优化"}},[_._v("#")]),_._v(" 微服务实战：NGINX与存储优化")]),_._v(" "),v("h2",{attrs:{id:"_6选择部署策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6选择部署策略"}},[_._v("#")]),_._v(" 6选择部署策略")]),_._v(" "),v("h3",{attrs:{id:"_6-1动机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-1动机"}},[_._v("#")]),_._v(" 6.1动机")]),_._v(" "),v("p",[_._v("​\t微服务应用程序由数十甚至上百个服务组成。服务以不同的语言和是一个迷你的应用程序，具有自己特定的部署、资源、扩展和监视要根据该服务的需求运行每个服务的一定数量的实例。此外，必须供相应的 CPU、内存和 I/O 资源。更具挑战性的是尽管如此复杂，速、可靠和具有成本效益。")]),_._v(" "),v("h3",{attrs:{id:"_6-2单主机多服务实例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-2单主机多服务实例模式"}},[_._v("#")]),_._v(" 6.2单主机多服务实例模式")]),_._v(" "),v("p",[_._v("​\t部署微服务的一种方式是使用单主机多服务实例（Multiple Service Instances perHost）模式。当使用此模式时，您可以提供一个或多个物理主机或虚拟主机，并在每个上运行多个服务实例。从多方面来讲，这是应用程序部署的传统方式。每个服务实例在一个或多个主机的标准端口上运行。主机通常被当作宠物对待。")]),_._v(" "),v("h3",{attrs:{id:"_6-3每个主机一个服务实例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3每个主机一个服务实例模式"}},[_._v("#")]),_._v(" 6.3每个主机一个服务实例模式")]),_._v(" "),v("p",[_._v("​\t每个虚拟机一个服务实例模式和每个容器一个服务实例模式。")]),_._v(" "),v("h4",{attrs:{id:"_6-3-1每个虚拟机一个服务实例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1每个虚拟机一个服务实例模式"}},[_._v("#")]),_._v(" 6.3.1每个虚拟机一个服务实例模式")]),_._v(" "),v("p",[_._v("​")]),_._v(" "),v("h4",{attrs:{id:"_6-3-2每个容器一个服务器实例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2每个容器一个服务器实例模式"}},[_._v("#")]),_._v(" 6.3.2每个容器一个服务器实例模式")]),_._v(" "),v("p",[_._v("​\t当您使用每个容器一个服务实例模式（Service Instance per Container）模式时，每个服务实例都在其自己的容器中运行。容器是一个操作系统级虚拟化机制。一个容器是由一个或多个运 行在沙箱中的你    进程组成。从进程的角度来看，它们有自己的端口命名空间和根文件系统。您可以限制容器的内存和 CPU 资源。一些容器实现也具有 I/O 速率限制。容器技术的相关例子有 Docker 和 Solaris Zones。")]),_._v(" "),v("h3",{attrs:{id:"_6-4serverless部署"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-4serverless部署"}},[_._v("#")]),_._v(" 6.4Serverless部署")]),_._v(" "),v("h3",{attrs:{id:"_6-5总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-5总结"}},[_._v("#")]),_._v(" 6.5总结")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：使用nginx在不同主机上部署微服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：使用nginx在不同主机上部署微服务"}},[_._v("#")]),_._v(" 微服务实战：使用NGINX在不同主机上部署微服务")]),_._v(" "),v("h2",{attrs:{id:"_7重构单体应用为微服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7重构单体应用为微服务"}},[_._v("#")]),_._v(" 7重构单体应用为微服务")]),_._v(" "),v("h3",{attrs:{id:"_7-1微服务重构概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-1微服务重构概述"}},[_._v("#")]),_._v(" 7.1微服务重构概述")]),_._v(" "),v("h3",{attrs:{id:"_7-2策略一：停止挖掘"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-2策略一：停止挖掘"}},[_._v("#")]),_._v(" 7.2策略一：停止挖掘")]),_._v(" "),v("p",[_._v("​\t洞穴定律说到，每当您身处在一个洞穴中，您应该停止挖掘以管理时，这是一个很好的建议。换句话说，您应该停止扩这意味着当您要实现新功能时，您不应该向单体添加更多的主要思想是将新代码放在独立的微服务中。")]),_._v(" "),v("h3",{attrs:{id:"_7-3策略二：前后端分离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-3策略二：前后端分离"}},[_._v("#")]),_._v(" 7.3策略二：前后端分离")]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("表现层（ 表现层（Presentation Layer Presentation Layer，PL PL）")])]),_._v(" "),v("p",[_._v("​\t\t处理 HTTP 请求并实现（REST）API 或基于 HTML 的 Web UI 组件。在具有复杂用户界面的应用中，表现层通常存在大量代码。")]),_._v(" "),v("p",[_._v("​\t**业务逻辑层（ 业务逻辑层（Business Logic Layer Business Logic Layer，BLL BLL） **")]),_._v(" "),v("p",[_._v("​\t\t作为应用程序核心，实现业务规则的组件。")]),_._v(" "),v("p",[_._v("​\t"),v("strong",[_._v("数据访问层（ 数据访问层（Data Access Layer Data Access Layer，DAL DAL）")])]),_._v(" "),v("p",[_._v("​\t\t访问基础架构组件的组件，如数据库和消息代理。")]),_._v(" "),v("h2",{attrs:{id:"_7-4策略三：提取服务-你"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-4策略三：提取服务-你"}},[_._v("#")]),_._v(" 7.4策略三：提取服务 你")]),_._v(" "),v("h4",{attrs:{id:"_7-4-1优先将那些模块转换为微服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-1优先将那些模块转换为微服务"}},[_._v("#")]),_._v(" 7.4.1优先将那些模块转换为微服务")]),_._v(" "),v("h4",{attrs:{id:"_7-4-2如何提取模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-2如何提取模块"}},[_._v("#")]),_._v(" 7.4.2如何提取模块")]),_._v(" "),v("h3",{attrs:{id:"_7-5总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-5总结"}},[_._v("#")]),_._v(" 7.5总结")]),_._v(" "),v("h3",{attrs:{id:"微服务实战：用nginx征服单体"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务实战：用nginx征服单体"}},[_._v("#")]),_._v(" 微服务实战：用NGINX征服单体")])])}),[],!1,null,null,null);t.default=r.exports}}]);